import numpy as np
import pickle as pkl
import networkx as nx
import scipy.sparse as sp
from scipy.sparse.linalg.eigen.arpack import eigsh
import sys
import os


def parse_index_file(filename):
    """Parse index file."""
    # this function gets the filename and reads it and returns an array with the indexes
    index = []
    for line in open(filename):
        index.append(int(line.strip()))
    return index


def sample_mask(idx, l):
    """Create mask."""
    # create np array with all zeros (size = l)
    mask = np.zeros(l)
    # put ones in given idx
    mask[idx] = 1
    return np.array(mask, dtype=np.bool) # return it and turn it to bool type

def sparse_to_tuple(sparse_mx):
    # convert sparse matrix structure to (coordiantes, values, shape)
    # coordinates are the places (row,col) with values != 0
    # values are the actual values of these place
    # shape of the matrix
    """Convert sparse matrix to tuple representation."""
    def to_tuple(mx):
        if not sp.isspmatrix_coo(mx): # if given matrix isn't in coomatrix format
            mx = mx.tocoo() # change it to coomatrix format
        coords = np.vstack((mx.row, mx.col)).transpose()
        values = mx.data
        shape = mx.shape
        return coords, values, shape

    if isinstance(sparse_mx, list):
        for i in range(len(sparse_mx)):
            sparse_mx[i] = to_tuple(sparse_mx[i])
    else:
        sparse_mx = to_tuple(sparse_mx)

    return sparse_mx


def preprocess_features(features):
    """Row-normalize feature matrix and convert to tuple representation"""
    # this function gets the sum of all columns in each row and raise these sums to power -1 and create a diagonal matrix 
    # from these values and then multiply it with features matrix, all of this is equivelant to creating D^-1 * X
    # which is used to normalize features matri
    rowsum = np.array(features.sum(1)) # add all columns in each row
    r_inv = np.power(rowsum, -1).flatten() # raise rowsum to power -1 and flatten it(make it one row (one dimension))
    r_inv[np.isinf(r_inv)] = 0. # if there were infinity due to power -1 make it 0
    r_mat_inv = sp.diags(r_inv) # create a diagonal matrix (a matrix with values only in diagonal and everything else are zeros)
    features = r_mat_inv.dot(features) # dot product between diagonal matrix and features matrix
    return sparse_to_tuple(features) # convert sparse matrix to tuple representation and return it


def normalize_adj(adj):
    """Symmetrically normalize adjacency matrix."""
    adj = sp.coo_matrix(adj) # create a coo_matrix of adj
    rowsum = np.array(adj.sum(1)) # find sum of all cols in each row
    d_inv_sqrt = np.power(rowsum, -0.5).flatten() # raise it to power -1/2
    d_inv_sqrt[np.isinf(d_inv_sqrt)] = 0. # replace infinity with 0
    d_mat_inv_sqrt = sp.diags(d_inv_sqrt) # make a diagonal matrix
    return adj.dot(d_mat_inv_sqrt).transpose().dot(d_mat_inv_sqrt).tocoo() # multiply D^-1/2 * A * D^-1/2


def preprocess_adj(adj):
    """Preprocessing of adjacency matrix for simple GCN model and conversion to tuple representation."""
    # add I to adj matrix and normalize it
    adj_normalized = normalize_adj(adj + sp.eye(adj.shape[0]))
    # after this step we have D^-1/2 * (A+I) * D^-1/2
    return sparse_to_tuple(adj_normalized)


def construct_feed_dict(features, support, labels, labels_mask, placeholders):
    """Construct feed dictionary."""
    feed_dict = dict() # make and empty dictionary
    feed_dict.update({placeholders['labels']: labels}) # add labels as value for placeholders['labels']
    feed_dict.update({placeholders['labels_mask']: labels_mask}) # add labels_mask as value for placeholders['labels_mask']
    feed_dict.update({placeholders['features']: features}) # add features as value for placeholders['features']
    feed_dict.update({placeholders['support'][i]: support[i] for i in range(len(support))}) 
    # add support as value for placeholders['support']
    # notice support is an array of adjacency matrices, that is the reason for the loop
    # this means we can give multiple graphs for the same features(this feature won't be needed in our network 
    #so we will always keep support_num = 1)
    feed_dict.update({placeholders['num_features_nonzero']: features[1].shape}) # number of features for each node
    return feed_dict


def chebyshev_polynomials(adj, k):
    """Calculate Chebyshev polynomials up to order k. Return a list of sparse matrices (tuple representation)."""
    print("Calculating Chebyshev polynomials up to order {}...".format(k))

    adj_normalized = normalize_adj(adj)
    laplacian = sp.eye(adj.shape[0]) - adj_normalized
    largest_eigval, _ = eigsh(laplacian, 1, which='LM')
    scaled_laplacian = (2. / largest_eigval[0]) * laplacian - sp.eye(adj.shape[0])

    t_k = list()
    t_k.append(sp.eye(adj.shape[0]))
    t_k.append(scaled_laplacian)

    def chebyshev_recurrence(t_k_minus_one, t_k_minus_two, scaled_lap):
        s_lap = sp.csr_matrix(scaled_lap, copy=True)
        return 2 * s_lap.dot(t_k_minus_one) - t_k_minus_two

    for i in range(2, k+1):
        t_k.append(chebyshev_recurrence(t_k[-1], t_k[-2], scaled_laplacian))

    return sparse_to_tuple(t_k)

def load_data(appName):
    adj = sp.load_npz(os.path.join(appName,'adj.npz'))
    y_train = np.load(os.path.join(appName,'y_train.npy'))
    features = pkl.load(open(os.path.join(appName,'features.pickle'),'rb'))
    train_mask = sample_mask(range(len(y_train)), y_train.shape[0])
    return adj, features, y_train, train_mask

def load_data2(appName):
    adj = sp.load_npz(os.path.join(appName,'adj.npz'))
    features = pkl.load(open(os.path.join(appName,'features.pickle'),'rb'))
    return adj, features
