from __future__ import division
from __future__ import print_function

import time
import tensorflow as tf

from utils import *
from models import GCN, MLP
import os

# Set random seed
seed = 123 
np.random.seed(seed)
tf.set_random_seed(seed)

flags = tf.app.flags 
FLAGS = flags.FLAGS

flags.DEFINE_string('model', 'gcn', 'Model string.')  # 'gcn', 'gcn_cheby', 'dense'
flags.DEFINE_float('learning_rate', 0.01, 'Initial learning rate.')
flags.DEFINE_integer('epochs',1000 , 'Number of epochs to train.')
flags.DEFINE_integer('hidden1', 32, 'Number of units in hidden layer 1.')
flags.DEFINE_integer('hidden2', 64, 'Number of units in hidden layer 2.')
flags.DEFINE_integer('hidden3', 32, 'Number of units in hidden layer 1.')
flags.DEFINE_float('dropout', 0.5, 'Dropout rate (1 - keep probability).')
flags.DEFINE_float('weight_decay', 5e-1, 'Weight for L2 loss on embedding matrix.') #5e-4
flags.DEFINE_integer('early_stopping', 10, 'Tolerance for early stopping (# of epochs).')
flags.DEFINE_integer('max_degree', 3, 'Maximum Chebyshev polynomial degree.')

sess = tf.Session()
model_func = GCN 
num_supports = 1
numberOfFeatures = 209
placeholders = {
    'support': [tf.sparse_placeholder(tf.float32) for _ in range(num_supports)],  # for adjacency
    'features': tf.sparse_placeholder(tf.float32, shape=(None,numberOfFeatures)),  # for features
    'labels': tf.placeholder(tf.float32, shape=(None, 2)),  # for labels
    'labels_mask': tf.placeholder(tf.int32),  # for mask
    'dropout': tf.placeholder_with_default(0., shape=()),  # for dropout
    'num_features_nonzero': tf.placeholder(tf.int32)  # helper variable for sparse dropout
}
model = model_func(placeholders, input_dim=numberOfFeatures, logging=True)
model.load(sess) # load model
for filename in os.listdir("test_data"):
    adj, features = load_data2(os.path.join('test_data', filename))
    # adj, features will come from preprocessing module instead of load_data2
    features = preprocess_features(features)
    support = [preprocess_adj(adj)]  # support = D^-1/2 * A * D^-1/2
    feed_dict = dict() # make and empty dictionary
    feed_dict.update({placeholders['features']: features}) # add features as value for placeholders['features']
    feed_dict.update({placeholders['support'][i]: support[i] for i in range(len(support))})
    feed_dict.update({placeholders['num_features_nonzero']: features[1].shape}) # number of features for each node
    out = sess.run(model.predict(), feed_dict=feed_dict)[0]
    if(out[0] >= out[1]):
        print(filename + ' ' + 'malware')
    else:
        print(filename + ' ' + 'bengin')

